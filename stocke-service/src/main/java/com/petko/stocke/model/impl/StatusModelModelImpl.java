/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.petko.stocke.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.petko.stocke.model.StatusModel;
import com.petko.stocke.model.StatusModelModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the StatusModel service. Represents a row in the &quot;stocke_StatusModel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StatusModelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StatusModelImpl}.
 * </p>
 *
 * @author petko
 * @see StatusModelImpl
 * @generated
 */
public class StatusModelModelImpl
	extends BaseModelImpl<StatusModel> implements StatusModelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a status model model instance should use the <code>StatusModel</code> interface instead.
	 */
	public static final String TABLE_NAME = "stocke_StatusModel";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"CaseModelId", Types.BIGINT},
		{"Status", Types.VARCHAR}, {"Internal", Types.BOOLEAN},
		{"Message", Types.VARCHAR}, {"Notification", Types.BOOLEAN},
		{"NotificationCount", Types.BIGINT}, {"NotificationType", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CaseModelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Internal", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("Message", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Notification", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("NotificationCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("NotificationType", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table stocke_StatusModel (id_ LONG not null primary key,CaseModelId LONG,Status VARCHAR(75) null,Internal BOOLEAN,Message VARCHAR(75) null,Notification BOOLEAN,NotificationCount LONG,NotificationType BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table stocke_StatusModel";

	public static final String ORDER_BY_JPQL = " ORDER BY statusModel.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY stocke_StatusModel.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long CASEMODELID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long INTERNAL_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StatusModelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StatusModel.class;
	}

	@Override
	public String getModelClassName() {
		return StatusModel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<StatusModel, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<StatusModel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StatusModel, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((StatusModel)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<StatusModel, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<StatusModel, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(StatusModel)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<StatusModel, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<StatusModel, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, StatusModel>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			StatusModel.class.getClassLoader(), StatusModel.class,
			ModelWrapper.class);

		try {
			Constructor<StatusModel> constructor =
				(Constructor<StatusModel>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<StatusModel, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<StatusModel, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<StatusModel, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<StatusModel, Object>>();
		Map<String, BiConsumer<StatusModel, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<StatusModel, ?>>();

		attributeGetterFunctions.put("id", StatusModel::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<StatusModel, Long>)StatusModel::setId);
		attributeGetterFunctions.put(
			"CaseModelId", StatusModel::getCaseModelId);
		attributeSetterBiConsumers.put(
			"CaseModelId",
			(BiConsumer<StatusModel, Long>)StatusModel::setCaseModelId);
		attributeGetterFunctions.put("Status", StatusModel::getStatus);
		attributeSetterBiConsumers.put(
			"Status", (BiConsumer<StatusModel, String>)StatusModel::setStatus);
		attributeGetterFunctions.put("Internal", StatusModel::getInternal);
		attributeSetterBiConsumers.put(
			"Internal",
			(BiConsumer<StatusModel, Boolean>)StatusModel::setInternal);
		attributeGetterFunctions.put("Message", StatusModel::getMessage);
		attributeSetterBiConsumers.put(
			"Message",
			(BiConsumer<StatusModel, String>)StatusModel::setMessage);
		attributeGetterFunctions.put(
			"Notification", StatusModel::getNotification);
		attributeSetterBiConsumers.put(
			"Notification",
			(BiConsumer<StatusModel, Boolean>)StatusModel::setNotification);
		attributeGetterFunctions.put(
			"NotificationCount", StatusModel::getNotificationCount);
		attributeSetterBiConsumers.put(
			"NotificationCount",
			(BiConsumer<StatusModel, Long>)StatusModel::setNotificationCount);
		attributeGetterFunctions.put(
			"NotificationType", StatusModel::getNotificationType);
		attributeSetterBiConsumers.put(
			"NotificationType",
			(BiConsumer<StatusModel, Boolean>)StatusModel::setNotificationType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public long getCaseModelId() {
		return _CaseModelId;
	}

	@Override
	public void setCaseModelId(long CaseModelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CaseModelId = CaseModelId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCaseModelId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CaseModelId"));
	}

	@Override
	public String getStatus() {
		if (_Status == null) {
			return "";
		}
		else {
			return _Status;
		}
	}

	@Override
	public void setStatus(String Status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Status = Status;
	}

	@Override
	public boolean getInternal() {
		return _Internal;
	}

	@Override
	public boolean isInternal() {
		return _Internal;
	}

	@Override
	public void setInternal(boolean Internal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Internal = Internal;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalInternal() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("Internal"));
	}

	@Override
	public String getMessage() {
		if (_Message == null) {
			return "";
		}
		else {
			return _Message;
		}
	}

	@Override
	public void setMessage(String Message) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Message = Message;
	}

	@Override
	public boolean getNotification() {
		return _Notification;
	}

	@Override
	public boolean isNotification() {
		return _Notification;
	}

	@Override
	public void setNotification(boolean Notification) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Notification = Notification;
	}

	@Override
	public long getNotificationCount() {
		return _NotificationCount;
	}

	@Override
	public void setNotificationCount(long NotificationCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_NotificationCount = NotificationCount;
	}

	@Override
	public boolean getNotificationType() {
		return _NotificationType;
	}

	@Override
	public boolean isNotificationType() {
		return _NotificationType;
	}

	@Override
	public void setNotificationType(boolean NotificationType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_NotificationType = NotificationType;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, StatusModel.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StatusModel toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, StatusModel>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StatusModelImpl statusModelImpl = new StatusModelImpl();

		statusModelImpl.setId(getId());
		statusModelImpl.setCaseModelId(getCaseModelId());
		statusModelImpl.setStatus(getStatus());
		statusModelImpl.setInternal(isInternal());
		statusModelImpl.setMessage(getMessage());
		statusModelImpl.setNotification(isNotification());
		statusModelImpl.setNotificationCount(getNotificationCount());
		statusModelImpl.setNotificationType(isNotificationType());

		statusModelImpl.resetOriginalValues();

		return statusModelImpl;
	}

	@Override
	public int compareTo(StatusModel statusModel) {
		long primaryKey = statusModel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof StatusModel)) {
			return false;
		}

		StatusModel statusModel = (StatusModel)object;

		long primaryKey = statusModel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<StatusModel> toCacheModel() {
		StatusModelCacheModel statusModelCacheModel =
			new StatusModelCacheModel();

		statusModelCacheModel.id = getId();

		statusModelCacheModel.CaseModelId = getCaseModelId();

		statusModelCacheModel.Status = getStatus();

		String Status = statusModelCacheModel.Status;

		if ((Status != null) && (Status.length() == 0)) {
			statusModelCacheModel.Status = null;
		}

		statusModelCacheModel.Internal = isInternal();

		statusModelCacheModel.Message = getMessage();

		String Message = statusModelCacheModel.Message;

		if ((Message != null) && (Message.length() == 0)) {
			statusModelCacheModel.Message = null;
		}

		statusModelCacheModel.Notification = isNotification();

		statusModelCacheModel.NotificationCount = getNotificationCount();

		statusModelCacheModel.NotificationType = isNotificationType();

		return statusModelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<StatusModel, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<StatusModel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StatusModel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((StatusModel)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<StatusModel, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<StatusModel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<StatusModel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((StatusModel)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, StatusModel>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private long _CaseModelId;
	private String _Status;
	private boolean _Internal;
	private String _Message;
	private boolean _Notification;
	private long _NotificationCount;
	private boolean _NotificationType;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<StatusModel, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((StatusModel)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("CaseModelId", _CaseModelId);
		_columnOriginalValues.put("Status", _Status);
		_columnOriginalValues.put("Internal", _Internal);
		_columnOriginalValues.put("Message", _Message);
		_columnOriginalValues.put("Notification", _Notification);
		_columnOriginalValues.put("NotificationCount", _NotificationCount);
		_columnOriginalValues.put("NotificationType", _NotificationType);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("CaseModelId", 2L);

		columnBitmasks.put("Status", 4L);

		columnBitmasks.put("Internal", 8L);

		columnBitmasks.put("Message", 16L);

		columnBitmasks.put("Notification", 32L);

		columnBitmasks.put("NotificationCount", 64L);

		columnBitmasks.put("NotificationType", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private StatusModel _escapedModel;

}